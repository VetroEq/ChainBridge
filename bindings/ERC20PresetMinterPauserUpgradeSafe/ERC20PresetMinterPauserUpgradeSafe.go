// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ERC20PresetMinterPauserUpgradeSafe

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC20PresetMinterPauserUpgradeSafeMetaData contains all meta data concerning the ERC20PresetMinterPauserUpgradeSafe contract.
var ERC20PresetMinterPauserUpgradeSafeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506132e6806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a457c2d711610097578063d539139311610071578063d5391393146109f5578063d547741f14610a13578063dd62ed3e14610a61578063e63ab1e914610ad9576101c4565b8063a457c2d7146108e7578063a9059cbb1461094d578063ca15c873146109b3576101c4565b80639010d07c116100d35780639010d07c1461076857806391d14854146107e057806395d89b4114610846578063a217fddf146108c9576101c4565b806370a08231146106b857806379cc6790146107105780638456cb591461075e576101c4565b806336568abe1161016657806340c10f191161014057806340c10f19146104c857806342966c68146105165780634cd88b76146105445780635c975abb14610696576101c4565b806336568abe1461040a57806339509351146104585780633f4ba83a146104be576101c4565b806323b872dd116101a257806323b872dd146102d0578063248a9ca3146103565780632f2ff15d14610398578063313ce567146103e6576101c4565b806306fdde03146101c9578063095ea7b31461024c57806318160ddd146102b2575b600080fd5b6101d1610af7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102115780820151818401526020810190506101f6565b50505050905090810190601f16801561023e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102986004803603604081101561026257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b99565b604051808215151515815260200191505060405180910390f35b6102ba610bb7565b6040518082815260200191505060405180910390f35b61033c600480360360608110156102e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bc1565b604051808215151515815260200191505060405180910390f35b6103826004803603602081101561036c57600080fd5b8101908080359060200190929190505050610c9a565b6040518082815260200191505060405180910390f35b6103e4600480360360408110156103ae57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cba565b005b6103ee610d44565b604051808260ff1660ff16815260200191505060405180910390f35b6104566004803603604081101561042057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d5b565b005b6104a46004803603604081101561046e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df4565b604051808215151515815260200191505060405180910390f35b6104c6610ea7565b005b610514600480360360408110156104de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f4c565b005b6105426004803603602081101561052c57600080fd5b8101908080359060200190929190505050610ff5565b005b6106946004803603604081101561055a57600080fd5b810190808035906020019064010000000081111561057757600080fd5b82018360208201111561058957600080fd5b803590602001918460018302840111640100000000831117156105ab57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561060e57600080fd5b82018360208201111561062057600080fd5b8035906020019184600183028401116401000000008311171561064257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611009565b005b61069e611017565b604051808215151515815260200191505060405180910390f35b6106fa600480360360208110156106ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061102e565b6040518082815260200191505060405180910390f35b61075c6004803603604081101561072657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611077565b005b6107666110d9565b005b61079e6004803603604081101561077e57600080fd5b81019080803590602001909291908035906020019092919050505061117e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61082c600480360360408110156107f657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111b0565b604051808215151515815260200191505060405180910390f35b61084e6111e2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561088e578082015181840152602081019050610873565b50505050905090810190601f1680156108bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108d1611284565b6040518082815260200191505060405180910390f35b610933600480360360408110156108fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061128b565b604051808215151515815260200191505060405180910390f35b6109996004803603604081101561096357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611358565b604051808215151515815260200191505060405180910390f35b6109df600480360360208110156109c957600080fd5b8101908080359060200190929190505050611376565b6040518082815260200191505060405180910390f35b6109fd61139d565b6040518082815260200191505060405180910390f35b610a5f60048036036040811015610a2957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113d6565b005b610ac360048036036040811015610a7757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611460565b6040518082815260200191505060405180910390f35b610ae16114e7565b6040518082815260200191505060405180910390f35b6060609a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b8f5780601f10610b6457610100808354040283529160200191610b8f565b820191906000526020600020905b815481529060010190602001808311610b7257829003601f168201915b5050505050905090565b6000610bad610ba6611520565b8484611528565b6001905092915050565b6000609954905090565b6000610bce84848461171f565b610c8f84610bda611520565b610c8a856040518060600160405280602881526020016130e260289139609860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610c40611520565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119e49092919063ffffffff16565b611528565b600190509392505050565b600060656000838152602001908152602001600020600201549050919050565b610ce16065600084815260200190815260200160002060020154610cdc611520565b6111b0565b610d36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612fe0602f913960400191505060405180910390fd5b610d408282611aa4565b5050565b6000609c60009054906101000a900460ff16905090565b610d63611520565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610de6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613258602f913960400191505060405180910390fd5b610df08282611b38565b5050565b6000610e9d610e01611520565b84610e988560986000610e12611520565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bcc90919063ffffffff16565b611528565b6001905092915050565b610eed60405180807f5041555345525f524f4c45000000000000000000000000000000000000000000815250600b0190506040518091039020610ee8611520565b6111b0565b610f42576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806130316039913960400191505060405180910390fd5b610f4a611c54565b565b610f9260405180807f4d494e5445525f524f4c45000000000000000000000000000000000000000000815250600b0190506040518091039020610f8d611520565b6111b0565b610fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061310a6036913960400191505060405180910390fd5b610ff18282611d5d565b5050565b611006611000611520565b82611f26565b50565b61101382826120ec565b5050565b600060fb60009054906101000a900460ff16905090565b6000609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006110b68260405180606001604052806024815260200161316e602491396110a7866110a2611520565b611460565b6119e49092919063ffffffff16565b90506110ca836110c4611520565b83611528565b6110d48383611f26565b505050565b61111f60405180807f5041555345525f524f4c45000000000000000000000000000000000000000000815250600b019050604051809103902061111a611520565b6111b0565b611174576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260378152602001806131fc6037913960400191505060405180910390fd5b61117c612229565b565b60006111a8826065600086815260200190815260200160002060000161233390919063ffffffff16565b905092915050565b60006111da826065600086815260200190815260200160002060000161234d90919063ffffffff16565b905092915050565b6060609b8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561127a5780601f1061124f5761010080835404028352916020019161127a565b820191906000526020600020905b81548152906001019060200180831161125d57829003601f168201915b5050505050905090565b6000801b81565b600061134e611298611520565b846113498560405180606001604052806025815260200161323360259139609860006112c2611520565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119e49092919063ffffffff16565b611528565b6001905092915050565b600061136c611365611520565b848461171f565b6001905092915050565b60006113966065600084815260200190815260200160002060000161237d565b9050919050565b60405180807f4d494e5445525f524f4c45000000000000000000000000000000000000000000815250600b019050604051809103902081565b6113fd60656000848152602001908152602001600020600201546113f8611520565b6111b0565b611452576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806130b26030913960400191505060405180910390fd5b61145c8282611b38565b5050565b6000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60405180807f5041555345525f524f4c45000000000000000000000000000000000000000000815250600b019050604051809103902081565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806131d86024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061306a6022913960400191505060405180910390fd5b80609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806131b36025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561182b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612fbd6023913960400191505060405180910390fd5b611836838383612392565b6118a28160405180606001604052806026815260200161308c60269139609760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119e49092919063ffffffff16565b609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061193781609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bcc90919063ffffffff16565b609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290611a91576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a56578082015181840152602081019050611a3b565b50505050905090810190601f168015611a835780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b611acc81606560008581526020019081526020016000206000016123a290919063ffffffff16565b15611b3457611ad9611520565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611b6081606560008581526020019081526020016000206000016123d290919063ffffffff16565b15611bc857611b6d611520565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600080828401905083811015611c4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60fb60009054906101000a900460ff16611cd6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b600060fb60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d1a611520565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b611e0c60008383612392565b611e2181609954611bcc90919063ffffffff16565b609981905550611e7981609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bcc90919063ffffffff16565b609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806131926021913960400191505060405180910390fd5b611fb882600083612392565b6120248160405180606001604052806022815260200161300f60229139609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119e49092919063ffffffff16565b609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061207c8160995461240290919063ffffffff16565b609981905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600060019054906101000a900460ff168061210b575061210a61244c565b5b8061212257506000809054906101000a900460ff16155b612177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613140602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156121c7576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6121cf612463565b6121d7612562565b6121e18383612661565b6121e96127ac565b6121f16128ab565b6121f96129c5565b6122038383612ac4565b80156122245760008060016101000a81548160ff0219169083151502179055505b505050565b60fb60009054906101000a900460ff16156122ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b600160fb60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122f0611520565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006123428360000183612c65565b60001c905092915050565b6000612375836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612ce8565b905092915050565b600061238b82600001612d0b565b9050919050565b61239d838383612d1c565b505050565b60006123ca836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612d8a565b905092915050565b60006123fa836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612dfa565b905092915050565b600061244483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506119e4565b905092915050565b6000803090506000813b9050600081149250505090565b600060019054906101000a900460ff1680612482575061248161244c565b5b8061249957506000809054906101000a900460ff16155b6124ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613140602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561253e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561255f5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612581575061258061244c565b5b8061259857506000809054906101000a900460ff16155b6125ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613140602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561263d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561265e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612680575061267f61244c565b5b8061269757506000809054906101000a900460ff16155b6126ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613140602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561273c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82609a9080519060200190612752929190612ef5565b5081609b9080519060200190612769929190612ef5565b506012609c60006101000a81548160ff021916908360ff16021790555080156127a75760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff16806127cb57506127ca61244c565b5b806127e257506000809054906101000a900460ff16155b612837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613140602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612887576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156128a85760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806128ca57506128c961244c565b5b806128e157506000809054906101000a900460ff16155b612936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613140602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612986576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600060fb60006101000a81548160ff02191690831515021790555080156129c25760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806129e457506129e361244c565b5b806129fb57506000809054906101000a900460ff16155b612a50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613140602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612aa0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612ac15760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612ae35750612ae261244c565b5b80612afa57506000809054906101000a900460ff16155b612b4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613140602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612b9f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612bb36000801b612bae611520565b612ee2565b612bf960405180807f4d494e5445525f524f4c45000000000000000000000000000000000000000000815250600b0190506040518091039020612bf4611520565b612ee2565b612c3f60405180807f5041555345525f524f4c45000000000000000000000000000000000000000000815250600b0190506040518091039020612c3a611520565b612ee2565b8015612c605760008060016101000a81548160ff0219169083151502179055505b505050565b600081836000018054905011612cc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612f9b6022913960400191505060405180910390fd5b826000018281548110612cd557fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b612d27838383612ef0565b612d2f611017565b15612d85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613287602a913960400191505060405180910390fd5b505050565b6000612d968383612ce8565b612def578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612df4565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612ed65760006001820390506000600186600001805490500390506000866000018281548110612e4557fe5b9060005260206000200154905080876000018481548110612e6257fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480612e9a57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050612edc565b60009150505b92915050565b612eec8282611aa4565b5050565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f3657805160ff1916838001178555612f64565b82800160010185558215612f64579182015b82811115612f63578251825591602001919060010190612f48565b5b509050612f719190612f75565b5090565b612f9791905b80821115612f93576000816000905550600101612f7b565b5090565b9056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647345524332303a207472616e7366657220746f20746865207a65726f2061646472657373416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e7445524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332305072657365744d696e7465725061757365723a206d75737420686176652070617573657220726f6c6520746f20756e706175736545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332305072657365744d696e7465725061757365723a206d7573742068617665206d696e74657220726f6c6520746f206d696e74436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332305072657365744d696e7465725061757365723a206d75737420686176652070617573657220726f6c6520746f20706175736545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c6645524332305061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564a2646970667358221220295cb1f54b474fef6b10e08d8a860618943fe277d2f8eeac9025d4ba3e3fe81f64736f6c63430006040033",
}

// ERC20PresetMinterPauserUpgradeSafeABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20PresetMinterPauserUpgradeSafeMetaData.ABI instead.
var ERC20PresetMinterPauserUpgradeSafeABI = ERC20PresetMinterPauserUpgradeSafeMetaData.ABI

// ERC20PresetMinterPauserUpgradeSafeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20PresetMinterPauserUpgradeSafeMetaData.Bin instead.
var ERC20PresetMinterPauserUpgradeSafeBin = ERC20PresetMinterPauserUpgradeSafeMetaData.Bin

// DeployERC20PresetMinterPauserUpgradeSafe deploys a new Ethereum contract, binding an instance of ERC20PresetMinterPauserUpgradeSafe to it.
func DeployERC20PresetMinterPauserUpgradeSafe(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20PresetMinterPauserUpgradeSafe, error) {
	parsed, err := ERC20PresetMinterPauserUpgradeSafeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20PresetMinterPauserUpgradeSafeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20PresetMinterPauserUpgradeSafe{ERC20PresetMinterPauserUpgradeSafeCaller: ERC20PresetMinterPauserUpgradeSafeCaller{contract: contract}, ERC20PresetMinterPauserUpgradeSafeTransactor: ERC20PresetMinterPauserUpgradeSafeTransactor{contract: contract}, ERC20PresetMinterPauserUpgradeSafeFilterer: ERC20PresetMinterPauserUpgradeSafeFilterer{contract: contract}}, nil
}

// ERC20PresetMinterPauserUpgradeSafe is an auto generated Go binding around an Ethereum contract.
type ERC20PresetMinterPauserUpgradeSafe struct {
	ERC20PresetMinterPauserUpgradeSafeCaller     // Read-only binding to the contract
	ERC20PresetMinterPauserUpgradeSafeTransactor // Write-only binding to the contract
	ERC20PresetMinterPauserUpgradeSafeFilterer   // Log filterer for contract events
}

// ERC20PresetMinterPauserUpgradeSafeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20PresetMinterPauserUpgradeSafeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20PresetMinterPauserUpgradeSafeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20PresetMinterPauserUpgradeSafeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20PresetMinterPauserUpgradeSafeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20PresetMinterPauserUpgradeSafeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20PresetMinterPauserUpgradeSafeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20PresetMinterPauserUpgradeSafeSession struct {
	Contract     *ERC20PresetMinterPauserUpgradeSafe // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                       // Call options to use throughout this session
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// ERC20PresetMinterPauserUpgradeSafeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20PresetMinterPauserUpgradeSafeCallerSession struct {
	Contract *ERC20PresetMinterPauserUpgradeSafeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                             // Call options to use throughout this session
}

// ERC20PresetMinterPauserUpgradeSafeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20PresetMinterPauserUpgradeSafeTransactorSession struct {
	Contract     *ERC20PresetMinterPauserUpgradeSafeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                             // Transaction auth options to use throughout this session
}

// ERC20PresetMinterPauserUpgradeSafeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20PresetMinterPauserUpgradeSafeRaw struct {
	Contract *ERC20PresetMinterPauserUpgradeSafe // Generic contract binding to access the raw methods on
}

// ERC20PresetMinterPauserUpgradeSafeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20PresetMinterPauserUpgradeSafeCallerRaw struct {
	Contract *ERC20PresetMinterPauserUpgradeSafeCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20PresetMinterPauserUpgradeSafeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20PresetMinterPauserUpgradeSafeTransactorRaw struct {
	Contract *ERC20PresetMinterPauserUpgradeSafeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20PresetMinterPauserUpgradeSafe creates a new instance of ERC20PresetMinterPauserUpgradeSafe, bound to a specific deployed contract.
func NewERC20PresetMinterPauserUpgradeSafe(address common.Address, backend bind.ContractBackend) (*ERC20PresetMinterPauserUpgradeSafe, error) {
	contract, err := bindERC20PresetMinterPauserUpgradeSafe(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafe{ERC20PresetMinterPauserUpgradeSafeCaller: ERC20PresetMinterPauserUpgradeSafeCaller{contract: contract}, ERC20PresetMinterPauserUpgradeSafeTransactor: ERC20PresetMinterPauserUpgradeSafeTransactor{contract: contract}, ERC20PresetMinterPauserUpgradeSafeFilterer: ERC20PresetMinterPauserUpgradeSafeFilterer{contract: contract}}, nil
}

// NewERC20PresetMinterPauserUpgradeSafeCaller creates a new read-only instance of ERC20PresetMinterPauserUpgradeSafe, bound to a specific deployed contract.
func NewERC20PresetMinterPauserUpgradeSafeCaller(address common.Address, caller bind.ContractCaller) (*ERC20PresetMinterPauserUpgradeSafeCaller, error) {
	contract, err := bindERC20PresetMinterPauserUpgradeSafe(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafeCaller{contract: contract}, nil
}

// NewERC20PresetMinterPauserUpgradeSafeTransactor creates a new write-only instance of ERC20PresetMinterPauserUpgradeSafe, bound to a specific deployed contract.
func NewERC20PresetMinterPauserUpgradeSafeTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20PresetMinterPauserUpgradeSafeTransactor, error) {
	contract, err := bindERC20PresetMinterPauserUpgradeSafe(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafeTransactor{contract: contract}, nil
}

// NewERC20PresetMinterPauserUpgradeSafeFilterer creates a new log filterer instance of ERC20PresetMinterPauserUpgradeSafe, bound to a specific deployed contract.
func NewERC20PresetMinterPauserUpgradeSafeFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20PresetMinterPauserUpgradeSafeFilterer, error) {
	contract, err := bindERC20PresetMinterPauserUpgradeSafe(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafeFilterer{contract: contract}, nil
}

// bindERC20PresetMinterPauserUpgradeSafe binds a generic wrapper to an already deployed contract.
func bindERC20PresetMinterPauserUpgradeSafe(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20PresetMinterPauserUpgradeSafeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.ERC20PresetMinterPauserUpgradeSafeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.ERC20PresetMinterPauserUpgradeSafeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.ERC20PresetMinterPauserUpgradeSafeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.DEFAULTADMINROLE(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.DEFAULTADMINROLE(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) MINTERROLE() ([32]byte, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.MINTERROLE(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) MINTERROLE() ([32]byte, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.MINTERROLE(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) PAUSERROLE() ([32]byte, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.PAUSERROLE(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) PAUSERROLE() ([32]byte, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.PAUSERROLE(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Allowance(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Allowance(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.BalanceOf(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.BalanceOf(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Decimals() (uint8, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Decimals(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) Decimals() (uint8, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Decimals(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.GetRoleAdmin(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.GetRoleAdmin(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.GetRoleMember(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.GetRoleMember(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.GetRoleMemberCount(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.GetRoleMemberCount(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.HasRole(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.HasRole(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts, role, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Name() (string, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Name(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) Name() (string, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Name(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Paused() (bool, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Paused(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) Paused() (bool, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Paused(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Symbol() (string, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Symbol(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) Symbol() (string, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Symbol(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20PresetMinterPauserUpgradeSafe.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) TotalSupply() (*big.Int, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.TotalSupply(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.TotalSupply(&_ERC20PresetMinterPauserUpgradeSafe.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Approve(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Approve(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Burn(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Burn(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.BurnFrom(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.BurnFrom(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.DecreaseAllowance(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.DecreaseAllowance(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, spender, subtractedValue)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.GrantRole(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.GrantRole(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, role, account)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.IncreaseAllowance(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.IncreaseAllowance(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name, string symbol) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) Initialize(opts *bind.TransactOpts, name string, symbol string) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "initialize", name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name, string symbol) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Initialize(name string, symbol string) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Initialize(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name, string symbol) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) Initialize(name string, symbol string) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Initialize(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, name, symbol)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Mint(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Mint(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, to, amount)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Pause() (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Pause(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) Pause() (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Pause(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.RenounceRole(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.RenounceRole(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.RevokeRole(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.RevokeRole(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, role, account)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Transfer(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Transfer(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.TransferFrom(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.TransferFrom(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts, sender, recipient, amount)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeSession) Unpause() (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Unpause(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeTransactorSession) Unpause() (*types.Transaction, error) {
	return _ERC20PresetMinterPauserUpgradeSafe.Contract.Unpause(&_ERC20PresetMinterPauserUpgradeSafe.TransactOpts)
}

// ERC20PresetMinterPauserUpgradeSafeApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeApprovalIterator struct {
	Event *ERC20PresetMinterPauserUpgradeSafeApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PresetMinterPauserUpgradeSafeApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PresetMinterPauserUpgradeSafeApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PresetMinterPauserUpgradeSafeApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PresetMinterPauserUpgradeSafeApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PresetMinterPauserUpgradeSafeApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PresetMinterPauserUpgradeSafeApproval represents a Approval event raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20PresetMinterPauserUpgradeSafeApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafeApprovalIterator{contract: _ERC20PresetMinterPauserUpgradeSafe.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20PresetMinterPauserUpgradeSafeApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PresetMinterPauserUpgradeSafeApproval)
				if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) ParseApproval(log types.Log) (*ERC20PresetMinterPauserUpgradeSafeApproval, error) {
	event := new(ERC20PresetMinterPauserUpgradeSafeApproval)
	if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20PresetMinterPauserUpgradeSafePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafePausedIterator struct {
	Event *ERC20PresetMinterPauserUpgradeSafePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PresetMinterPauserUpgradeSafePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PresetMinterPauserUpgradeSafePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PresetMinterPauserUpgradeSafePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PresetMinterPauserUpgradeSafePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PresetMinterPauserUpgradeSafePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PresetMinterPauserUpgradeSafePaused represents a Paused event raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) FilterPaused(opts *bind.FilterOpts) (*ERC20PresetMinterPauserUpgradeSafePausedIterator, error) {

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafePausedIterator{contract: _ERC20PresetMinterPauserUpgradeSafe.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ERC20PresetMinterPauserUpgradeSafePaused) (event.Subscription, error) {

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PresetMinterPauserUpgradeSafePaused)
				if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) ParsePaused(log types.Log) (*ERC20PresetMinterPauserUpgradeSafePaused, error) {
	event := new(ERC20PresetMinterPauserUpgradeSafePaused)
	if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20PresetMinterPauserUpgradeSafeRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeRoleGrantedIterator struct {
	Event *ERC20PresetMinterPauserUpgradeSafeRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PresetMinterPauserUpgradeSafeRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PresetMinterPauserUpgradeSafeRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PresetMinterPauserUpgradeSafeRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PresetMinterPauserUpgradeSafeRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PresetMinterPauserUpgradeSafeRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PresetMinterPauserUpgradeSafeRoleGranted represents a RoleGranted event raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ERC20PresetMinterPauserUpgradeSafeRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafeRoleGrantedIterator{contract: _ERC20PresetMinterPauserUpgradeSafe.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ERC20PresetMinterPauserUpgradeSafeRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PresetMinterPauserUpgradeSafeRoleGranted)
				if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) ParseRoleGranted(log types.Log) (*ERC20PresetMinterPauserUpgradeSafeRoleGranted, error) {
	event := new(ERC20PresetMinterPauserUpgradeSafeRoleGranted)
	if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20PresetMinterPauserUpgradeSafeRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeRoleRevokedIterator struct {
	Event *ERC20PresetMinterPauserUpgradeSafeRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PresetMinterPauserUpgradeSafeRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PresetMinterPauserUpgradeSafeRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PresetMinterPauserUpgradeSafeRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PresetMinterPauserUpgradeSafeRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PresetMinterPauserUpgradeSafeRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PresetMinterPauserUpgradeSafeRoleRevoked represents a RoleRevoked event raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ERC20PresetMinterPauserUpgradeSafeRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafeRoleRevokedIterator{contract: _ERC20PresetMinterPauserUpgradeSafe.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ERC20PresetMinterPauserUpgradeSafeRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PresetMinterPauserUpgradeSafeRoleRevoked)
				if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) ParseRoleRevoked(log types.Log) (*ERC20PresetMinterPauserUpgradeSafeRoleRevoked, error) {
	event := new(ERC20PresetMinterPauserUpgradeSafeRoleRevoked)
	if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20PresetMinterPauserUpgradeSafeTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeTransferIterator struct {
	Event *ERC20PresetMinterPauserUpgradeSafeTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PresetMinterPauserUpgradeSafeTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PresetMinterPauserUpgradeSafeTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PresetMinterPauserUpgradeSafeTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PresetMinterPauserUpgradeSafeTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PresetMinterPauserUpgradeSafeTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PresetMinterPauserUpgradeSafeTransfer represents a Transfer event raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20PresetMinterPauserUpgradeSafeTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafeTransferIterator{contract: _ERC20PresetMinterPauserUpgradeSafe.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20PresetMinterPauserUpgradeSafeTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PresetMinterPauserUpgradeSafeTransfer)
				if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) ParseTransfer(log types.Log) (*ERC20PresetMinterPauserUpgradeSafeTransfer, error) {
	event := new(ERC20PresetMinterPauserUpgradeSafeTransfer)
	if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20PresetMinterPauserUpgradeSafeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeUnpausedIterator struct {
	Event *ERC20PresetMinterPauserUpgradeSafeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PresetMinterPauserUpgradeSafeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PresetMinterPauserUpgradeSafeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PresetMinterPauserUpgradeSafeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PresetMinterPauserUpgradeSafeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PresetMinterPauserUpgradeSafeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PresetMinterPauserUpgradeSafeUnpaused represents a Unpaused event raised by the ERC20PresetMinterPauserUpgradeSafe contract.
type ERC20PresetMinterPauserUpgradeSafeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ERC20PresetMinterPauserUpgradeSafeUnpausedIterator, error) {

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ERC20PresetMinterPauserUpgradeSafeUnpausedIterator{contract: _ERC20PresetMinterPauserUpgradeSafe.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ERC20PresetMinterPauserUpgradeSafeUnpaused) (event.Subscription, error) {

	logs, sub, err := _ERC20PresetMinterPauserUpgradeSafe.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PresetMinterPauserUpgradeSafeUnpaused)
				if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20PresetMinterPauserUpgradeSafe *ERC20PresetMinterPauserUpgradeSafeFilterer) ParseUnpaused(log types.Log) (*ERC20PresetMinterPauserUpgradeSafeUnpaused, error) {
	event := new(ERC20PresetMinterPauserUpgradeSafeUnpaused)
	if err := _ERC20PresetMinterPauserUpgradeSafe.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
